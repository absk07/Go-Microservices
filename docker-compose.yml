services:
  postgres:
    image: postgres:16-alpine
    environment:
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=auth
    ports:
      - "3000:5432"
    restart: always
    deploy:
      mode: replicated
      replicas: 1
    healthcheck:
      test: pg_isready -U "$$POSTGRES_USER" -d "$$POSTGRES_DB"
      interval: 10s
      timeout: 2s
      retries: 10
    volumes:
      - data-volume:/var/lib/postgresql/data

  mongo:
    image: mongo
    ports:
      - 27017:27017
    restart: always
    environment:
      - MONGO_INITDB_DATABASE=logs
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh mongo:27017/logs --quiet
      interval: 10s
      timeout: 10s
      retries: 5
    volumes:
      - data-volume:/var/lib/mongodb/data

  broker-service:
    depends_on:
      - auth-service
      - logger-service
    build:
      context: .
      dockerfile: ./broker-service/Dockerfile
    restart: always
    ports:
      - "8080:8080"
    deploy:
      mode: replicated
      replicas: 1

  auth-service:
    depends_on:
      postgres:
        condition: service_healthy
    build:
      context: .
      dockerfile: ./auth-service/Dockerfile
    restart: always
    ports:
      - "9090:9090"
    deploy:
      mode: replicated
      replicas: 1
    environment:
      - DB_SOURCE=postgresql://root:password@go-microservices-postgres-1:5432/auth?sslmode=disable

  logger-service:
    depends_on:
      mongo:
        condition: service_healthy
    build:
      context: .
      dockerfile: ./logger-service/Dockerfile
    restart: always
    ports:
      - "7070:7070"
    deploy:
      mode: replicated
      replicas: 1

volumes:
  data-volume: